Electronic system level (ESL) design and verification is an emerging
electronic design methodology that focuses on the higher abstraction
level   concerns first and foremost. The term Electronic System Level or
ESL Design was first defined by Gartner Dataquest, an EDA-industry-analysisfirm,
on February 1, 2001.[1] It is defined in the ESL Design and Verification book [2]
as: "the utilization of appropriate abstractions in order to increase
comprehension about a system, and to enhance the probability of a successful
implementation   of functionality in a cost-effective manner."

The basic premise is to model the behavior of the entire system using a high-level
language such   as C, C++, LabVIEW, or MATLAB or using graphical "model-based"
design tools like SystemVue, VisualSim or Simulink. Newer languages are emerging
that enable the creation of a model at a higher level of abstraction including
general purpose system design languages like SysML as well as those that are
specific to embedded system design like SMDL and SSDL supported by emerging
system design automation products like Teraptor.[3] Rapid and
correct-by-construction implementation of the system can be automated using
EDA tools such as high-level synthesis and embedded software tools, although
much of it is performed manually today. ESL can also be accomplished through
the use of SystemC as an abstract modeling language.

Electronic System Level is now an established approach at most of the world's
leading System-on-a-chip (SoC) design companies, and is being used increasingly
in system design.[citation needed] From its genesis as an algorithm modeling
methodology with 'no links to implementation', ESL is evolving into a set of
complementary methodologies that enable embedded system design, verification,
and debugging through to the hardware and software implementation of custom SoC,
system-on-FPGA, system-on board, and entire multi-board systems.
